# This policy enforces validation of use of Groups & Service Accounts with policy
# and not the use of Custom Role in IAM.
# These sentinel policies enforce Wells Fargo security principles

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan
import "strings"
import "types"
import "json"

# Resource Types Region Map
allowed_prefix = ["group:", "serviceAccount:"]

deny_services = ["google_project_iam_custom_role", "google_organization_iam_custom_role"]

resourceTypesIamMap = {
	"google_project_iam_policy": {
		"keys": ["policy_data", "members"],
	},
	"google_project_iam_binding": {
		"keys": ["member", "members"],
	},
	"google_project_iam_member": {
		"keys": ["member", "members"],
	},
	"google_organization_iam_policy": {
		"keys": ["policy_data", "members"],
	},
	"google_organization_iam_binding": {
		"keys": ["member", "members"],
	},
	"google_organization_iam_member": {
		"keys": ["member", "members"],
	},
}

allResources = {}
for resourceTypesIamMap as rt, _ {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allResources[address] = rc
	}
}
violations = {}
check_for_member = func(address, rc, mkey) {
	members_list = []

	member = plan.evaluate_attribute(rc.change.after, mkey)
	is_list = rule { types.type_of(member) is "list" }
	is_string = rule { types.type_of(member) is "string" }
	if is_string and strings.has_prefix(member, "{") {

		pol_data = json.unmarshal(member)
		for pol_data as ad, lp {
			for lp as rt {
				mem = plan.evaluate_attribute(rt, "members")
				members_list = mem
			}
		}
	} else {

		if is_string {
			append(members_list, member)

		}
		if is_list {
			members_list = member

		}

	}
	for members_list as lst {
		member_prefix = strings.split(lst, ":")[0] + ":"

		#print(member_prefix)
		if not (member_prefix in allowed_prefix) {
			violations[address] = rc
		}
	}

	return violations
}

msgs = {}
for allResources as address, rc {
	type = rc["type"]
	for resourceTypesIamMap[type]["keys"] as mkey {
		msg = check_for_member(
			address,
			rc,
			mkey,
		)
		#print(violations)
		if length(msg) > 0 {
			msgs[address] = msg
		}
	}

}

GCP_IAM_ENTITY = rule { length(msgs) is 0 }

#==============================================================================
#custom Role Code
#==============================================================================

# Fetch all resources based on deny_services
allRes = {}
for deny_services as rt {
	resources = plan.find_resources(rt)
	for resources as address, rc {
		allRes[address] = rc
	}
}

#print(allRes)

# Fetch all resources which are not allowed as per deny services list
violatingResources = plan.filter_attribute_not_contains_list(allRes,
	"type", deny_services, true)
print(violatingResources)

GCP_IAM_CUSTOM = rule { length(violatingResources["messages"]) is 0 }

# Main rule
main = rule { GCP_IAM_ENTITY and GCP_IAM_CUSTOM }
